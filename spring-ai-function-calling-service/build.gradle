plugins {
	id 'java-library'
	id 'maven-publish'
	id 'org.jreleaser' version '1.13.1'
}

group = 'io.github.feddericovonwernich'
version = '0.0.5-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {

	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot
	implementation group: 'org.springframework.boot', name: 'spring-boot', version: '3.3.1'

	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-autoconfigure
	implementation group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: '3.3.1'

	// https://mvnrepository.com/artifact/jakarta.annotation/jakarta.annotation-api
	implementation group: 'jakarta.annotation', name: 'jakarta.annotation-api', version: '3.0.0'

	// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
	implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.16'

	// https://mvnrepository.com/artifact/com.squareup.retrofit2/retrofit
	implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: '2.11.0'

	// https://mvnrepository.comf/artifact/org.projectlombok/lombok
	compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.34'

	// https://mvnrepository.com/artifact/org.projectlombok/lombok
	annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.34'

	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.17.2'

	// https://mvnrepository.com/artifact/com.squareup.retrofit2/converter-jackson
	implementation group: 'com.squareup.retrofit2', name: 'converter-jackson', version: '2.11.0'

	// https://mvnrepository.com/artifact/com.squareup.retrofit2/adapter-rxjava3
	implementation group: 'com.squareup.retrofit2', name: 'adapter-rxjava3', version: '2.11.0'

	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.11.0'

	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.17.2'

	// https://mvnrepository.com/artifact/org.reflections/reflections
	implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'

	// Test Compile dependencies

	// https://mvnrepository.com/artifact/org.projectlombok/lombok
	testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.34'

	// Test dependencies.

	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.3.1'

	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.0'

	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	testImplementation group: 'com.google.code.gson', name: 'gson', version: '2.11.0'

}

tasks.named('test') {
	useJUnitPlatform()
}

jar {
	manifest {
		attributes(
				'Implementation-Title': 'Spring AI function calling service.',
				'Implementation-Version': version
		)
	}
}

java {
	withSourcesJar()
	withJavadocJar()
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId = 'io.github.feddericovonwernich'
			artifactId = 'spring-ai-function-calling-service'

			from components.java

			pom {
				name = 'Spring AI Function Calling Service'
				description = 'Function calling implemented with annotations.'
				url = 'https://github.com/feddericovonwernich/spring-ai-function-calling-service'
				inceptionYear = '2024'
				licenses {
					license {
						name = 'Apache-2.0'
						url = 'https://spdx.org/licenses/Apache-2.0.html'
					}
				}
				developers {
					developer {
						id = 'Federico von Wernich'
						name = 'Federico von Wernich'
					}
				}
				scm {
					connection = 'scm:git:https://github.com/feddericovonwernich/spring-ai-function-calling-service.git'
					developerConnection = 'scm:git:ssh://github.com/feddericovonwernich/spring-ai-function-calling-service.git'
					url = 'http://github.com/feddericovonwernich/spring-ai-function-calling-service'
				}
			}
		}
	}

	repositories {
		maven {
			url = layout.buildDirectory.dir('staging-deploy')
		}
	}
}

// Define the default value for jreleaserConfigFile
def defaultJreleaserConfigFile = 'jreleaserPreReleaseToGithub.yml'

// Use the value from gradle.properties or fall back to the default
def jreleaserConfigFile = project.findProperty('jreleaserConfigFile') ?: defaultJreleaserConfigFile


jreleaser {
	configFile(projectDir.getAbsolutePath() + "/" + jreleaserConfigFile)
	setGitRootSearch(true)
}

tasks.named('test') {
	useJUnitPlatform()
}